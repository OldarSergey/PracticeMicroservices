version: '3.9'

networks:
  app-network:
    name: app-network
    driver: bridge

services:
  gatewayapi:
    image: ${DOCKER_REGISTRY-}gatewayapi
    build:
      context: .
      dockerfile: GatewayAPI/Dockerfile
    ports:
    - "5000:5000"
    - "5001:5001"
    container_name: gatewayapi
    networks:
      - app-network

  archivewebapi:
    image: ${DOCKER_REGISTRY-}archivewebapi
    build:
      context: .
      dockerfile: ArchiveWebAPI/Dockerfile
    ports:
    - "5100:5100"
    - "5101:5101"
    container_name: archivewebapi
    networks:
      - app-network

  newswebapi:
    image: ${DOCKER_REGISTRY-}newswebapi
    build:
      context: .
      dockerfile: NewsWebAPI/Dockerfile
    ports:
     - "5200:5200"
     - "5201:5201"
    container_name: newswebapi
    networks:
      - app-network

  notificationswebapi:
    image: ${DOCKER_REGISTRY-}notificationswebapi
    build:
      context: .
      dockerfile:  NotificationsWebAPI/Dockerfile
    ports:
     - "5300:5300"
     - "5301:5301"
    container_name: notificationswebapi
    networks:
      - app-network

  statementwebapi:
    image: ${DOCKER_REGISTRY-}statementwebapi
    build:
      context: .
      dockerfile:  StatementWebAPI/Dockerfile
    ports:
     - "5400:5400"
     - "5401:5401"
    container_name: statementwebapi
    networks:
      - app-network

  userwebapi:
    image: ${DOCKER_REGISTRY-}userwebapi
    build:
      context: .
      dockerfile:  UserWebAPI/Dockerfile
    ports:
     - "5500:5500"
     - "5501:5501"
    container_name: userwebapi
    networks:
      - app-network

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka1:
    image: docker.io/bitnami/kafka:3.6
    container_name: kafka1
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092,EXTERNAL://kafka1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9100:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    depends_on:
      - kafka1
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: F7CMQ3NUs
      POSTGRES_DB: PracticeMicroservices
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  zookeeper_data:
    driver: local

  kafka_data:
    driver: local

  postgres_data:
    driver: local
